
<!--
Git common targets

By default it uses git from command line.

-->
<project name="common-git">

  <!-- Set the current file path -->
  <dirname property="common-git._basedir" file="${ant.file.common-git}" />

  <available file=".git" type="dir" property="git.present"/>



  <!-- **************************************************** -->
  <!-- Sets property "repository.version" to head git revision -->
  <!-- **************************************************** -->
  <target name="common-git-revision" if="git.present">

    <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
      <arg line="rev-list --count --all HEAD" />
    </exec>

    <condition property="repository.version" value="${git.revision}" else="unknown">
      <and>
        <isset property="git.revision" />
        <length string="${git.revision}" trim="yes" length="0" when="greater" />
      </and>
    </condition>

    <property name="git-revision" value="${git.revision}" />
    <echo>Git revision found: ${git.revision}</echo>
    <echo>Property "repository.version" defined</echo>
  </target>



  <!-- **************************************************** -->
  <!-- Sets properties based on git info -->
  <!-- **************************************************** -->
  <target name="common-git-info" if="git.present">

    <exec executable="git" outputproperty="git.revision">
      <arg line="rev-list --count HEAD" /> <!-- Do not use "all" because it counts all commits on all branches (branches could be removed and count could be change) -->
    </exec>

    <exec executable="git" outputproperty="git.commit">
      <arg line="rev-parse HEAD" />
    </exec>

    <exec executable="git" outputproperty="git.commit_short">
      <arg line="rev-parse --short HEAD" />
    </exec>

    <exec executable="git" outputproperty="git.tag">
      <arg line="tag" />
    </exec>

    <exec executable="git" outputproperty="git.branch">
      <arg line="name-rev --name-only ${git.commit_short}" />
    </exec>

    <condition property="git.is_master">
      <equals arg1="${git.branch}" arg2="master" />
    </condition>

    <echo>Git info</echo>
    <echo>git.revision: ${git.revision}</echo>
    <echo>git.commit: ${git.commit}</echo>
    <echo>git.commit_short: ${git.commit_short}</echo>
    <echo>git.tag: ${git.tag}</echo>
    <echo>git.branch: ${git.branch}</echo>
    <echo>git.is_master: ${git.is_master}</echo>

  </target>

</project>
